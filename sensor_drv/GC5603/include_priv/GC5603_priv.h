/******************************************************************************\
|* Copyright (c) 2020 by VeriSilicon Holdings Co., Ltd. ("VeriSilicon")       *|
|* All Rights Reserved.                                                       *|
|*                                                                            *|
|* The material in this file is confidential and contains trade secrets of    *|
|* of VeriSilicon.  This is proprietary information owned or licensed by      *|
|* VeriSilicon.  No part of this work may be disclosed, reproduced, copied,   *|
|* transmitted, or used in any way for any purpose, without the express       *|
|* written permission of VeriSilicon.                                         *|
|*                                                                            *|
\******************************************************************************/
/**
 * @file GC5603_priv.h
 *
 * @brief Interface description for image sensor specific implementation (iss).
 *
 *****************************************************************************/
/**
 * @page module_name_page Module Name
 * Describe here what this module does.
 *
 * For a detailed list of functions and implementation detail refer to:
 * - @ref module_name
 *
 * @defgroup gc5603_priv
 * @{
 *
 */
#ifndef __GC5603_PRIV_H__
#define __GC5603_PRIV_H__

#include <ebase/types.h>
#include <common/return_codes.h>
#include <hal/hal_api.h>
#include <isi/isi_common.h>
#include <isi/isi_vvsensor.h>



#ifdef __cplusplus
extern "C"
{
#endif

typedef struct GC5603_Context_s
{
    IsiSensorContext_t     isiCtx;                 /**< common context of ISI and ISI driver layer; @note: MUST BE FIRST IN DRIVER CONTEXT */
    IsiSensorMode_t        sensorMode;

    uint32_t               maxFps;
    uint32_t               minFps;
    uint32_t               currFps;

    bool_t                 configured;             /**< flags that config was applied to sensor */
    bool_t                 streaming;              /**< flags that csensor is streaming data */
    bool_t                 testPattern;            /**< flags that sensor is streaming test-pattern */
    bool_t                 isAfpsRun;              /**< if true, just do anything required for Afps parameter calculation, but DON'T access SensorHW! */

    float                  oneLineExpTime;
    uint16_t               maxIntegrationLine;
    uint16_t               minIntegrationLine;

    uint16_t               frameLengthLines;       /**< frame line length */
    uint16_t               curFrameLengthLines;

    float                  aecMinGain;
    float                  aecMaxGain;
    float                  aecMinIntegrationTime;
    float                  aecMaxIntegrationTime;

    float                  aecIntegrationTimeIncrement; /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */
    float                  aecGainIncrement;            /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */

    float                  aecCurGain;
    float                  aecCurIntegrationTime;
    float                  curAgain;
    float                  curDgain;

    bool                   groupHold;
    uint32_t               oldGain;
    uint32_t               oldIntegrationTime;

    IsiGainInfo_t          aGain;
    IsiGainInfo_t          dGain;

} GC5603_Context_t;

static RESULT GC5603_IsiCreateIss(IsiSensorInstanceConfig_t *pConfig, IsiSensorHandle_t *pHandle);
static RESULT GC5603_IsiOpenIss(IsiSensorHandle_t handle, uint32_t mode);
static RESULT GC5603_IsiCloseIss(IsiSensorHandle_t handle);
static RESULT GC5603_IsiReleaseIss(IsiSensorHandle_t handle);
static RESULT GC5603_IsiGetCapsIss(IsiSensorHandle_t handle, IsiCaps_t * pCaps);
static RESULT GC5603_IsiSetStreamingIss(IsiSensorHandle_t handle, bool_t on);
static RESULT GC5603_IsiGetRevisionIss(IsiSensorHandle_t handle, uint32_t *pValue);
static RESULT GC5603_IsiGetAeBaseInfoIss(IsiSensorHandle_t handle, IsiAeBaseInfo_t *pAeBaseInfo);
static RESULT GC5603_IsiGetAGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorAGain);
static RESULT GC5603_IsiGetDGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorDGain);
static RESULT GC5603_IsiSetAGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorAGain);
static RESULT GC5603_IsiSetDGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorDGain);
static RESULT GC5603_IsiGetIntTimeIss(IsiSensorHandle_t handle, IsiSensorIntTime_t *pSensorIntTime);
static RESULT GC5603_IsiSetIntTimeIss(IsiSensorHandle_t handle, const IsiSensorIntTime_t *pSensorIntTime);

static uint16_t GC5603_analog_gain[][8] =
    {
        {0x40, 0x00, 0x00, 0x04, 0x15, 0x15, 0x01, 0x00},
        {0x4a, 0x90, 0x02, 0x04, 0x15, 0x15, 0x01, 0x0a},
        {0x52, 0x00, 0x00, 0x00, 0x15, 0x15, 0x01, 0x12},
        {0x60, 0x90, 0x02, 0x00, 0x15, 0x15, 0x01, 0x20},
        {0x70, 0x01, 0x00, 0x00, 0x15, 0x15, 0x01, 0x30},
        {0x85, 0x91, 0x02, 0x00, 0x15, 0x15, 0x02, 0x05},
        {0x99, 0x02, 0x00, 0x00, 0x15, 0x15, 0x02, 0x19},
        {0xbf, 0x92, 0x02, 0x00, 0x16, 0x16, 0x02, 0x3f},
        {0xe0, 0x03, 0x00, 0x00, 0x16, 0x16, 0x03, 0x20},
        {0x10a, 0x93, 0x02, 0x00, 0x17, 0x17, 0x04, 0x0a},
        {0x142, 0x00, 0x00, 0x01, 0x18, 0x18, 0x05, 0x02},
        {0x179, 0x90, 0x02, 0x01, 0x19, 0x19, 0x05, 0x39},
        {0x1bc, 0x01, 0x00, 0x01, 0x19, 0x19, 0x06, 0x3c},
        {0x20d, 0x91, 0x02, 0x01, 0x19, 0x19, 0x08, 0x0d},
        {0x261, 0x02, 0x00, 0x01, 0x1a, 0x1a, 0x09, 0x21},
        {0x2cf, 0x92, 0x02, 0x01, 0x1a, 0x1a, 0x0b, 0x0f},
        {0x357, 0x03, 0x00, 0x01, 0x1c, 0x1c, 0x0d, 0x17},
        {0x3f3, 0x93, 0x02, 0x01, 0x1c, 0x1c, 0x0f, 0x33},
        {0x4b0, 0x04, 0x00, 0x01, 0x1d, 0x1d, 0x12, 0x30},
        {0x590, 0x94, 0x02, 0x01, 0x1d, 0x1d, 0x16, 0x10},
        {0x699, 0x05, 0x00, 0x01, 0x1e, 0x1e, 0x1a, 0x19},
        {0x7d3, 0x95, 0x02, 0x01, 0x1e, 0x1e, 0x1f, 0x13},
        {0x948, 0x06, 0x00, 0x01, 0x1f, 0x1f, 0x25, 0x08},
        {0xB03, 0x96, 0x02, 0x01, 0x1f, 0x1f, 0x2c, 0x03},
        {0xd0f, 0xb6, 0x04, 0x01, 0x20, 0x20, 0x34, 0x0f},
        {0xf7d, 0x86, 0x06, 0x01, 0x20, 0x20, 0x3d, 0x3d}
    };

static uint16_t GC5603_mipi4lane_2960_1666_init[][2] =
{
    {0x03fe, 0xf0},
    {0x03fe, 0x00},
    {0x03fe, 0x10},
    {0x03fe, 0x00},
    {0x0a38, 0x03},
    {0x0a20, 0x07},
    {0x061b, 0x03},
    {0x061c, 0x50},
    {0x061d, 0x07},
    {0x061e, 0x38},
    {0x061f, 0x03},
    {0x0a21, 0x08},
    {0x0a28, 0x01},
    {0x0a34, 0x40},
    {0x0a35, 0x10},
    {0x0a36, 0x58},
    {0x0a37, 0x03},
    {0x0314, 0x70},
    {0x0315, 0x32},
    {0x031c, 0xce},
    {0x0219, 0x47},
    {0x0342, 0x07},
    {0x0343, 0x08},//HTS 0x708
    {0x0340, 0x06},
    {0x0341, 0xd6},//VTS 0x6d6
    {0x0345, 0x02},
    {0x0347, 0x02},
    {0x0348, 0x0b},
    {0x0349, 0x98},
    {0x034a, 0x06},
    {0x034b, 0x8a},
    {0x0094, 0x0b},
    {0x0095, 0x90},//0xb90
    {0x0096, 0x06},
    {0x0097, 0x82},//0x684
    {0x0099, 0x04},
    {0x009b, 0x04},
    {0x060c, 0x01},
    {0x060e, 0xd2},
    {0x060f, 0x05},
    {0x070c, 0x01},
    {0x070e, 0xd2},
    {0x070f, 0x05},
    {0x0709, 0x40},
    {0x0719, 0x40},
    {0x0909, 0x07},
    {0x0902, 0x04},
    {0x0904, 0x0b},
    {0x0907, 0x54},
    {0x0908, 0x06},
    {0x0903, 0x9d},
    {0x072a, 0x1c},
    {0x072b, 0x1c},
    {0x0724, 0x2b},
    {0x0727, 0x2b},
    {0x1466, 0x18},
    {0x1467, 0x15},
    {0x1468, 0x15},
    {0x1469, 0x70},
    {0x146a, 0xe8},
    {0x0707, 0x07},
    {0x0737, 0x0f},
    {0x0704, 0x01},
    {0x0706, 0x02},
    {0x0716, 0x02},
    {0x0708, 0xc8},
    {0x0718, 0xc8},
    {0x061a, 0x02},
    {0x1430, 0x80},
    {0x1407, 0x10},
    {0x1408, 0x16},
    {0x1409, 0x03},
    {0x1438, 0x01},
    {0x02ce, 0x03},
    {0x0245, 0xc9},
    {0x023a, 0x08},
    {0x02cd, 0x88},
    {0x0612, 0x02},
    {0x0613, 0xc7},
    {0x0243, 0x03},
    {0x0089, 0x03},
    {0x0002, 0xab},	
    {0x0040, 0xa3},
    {0x0075, 0x64},
    {0x0004, 0x0f},
    {0x0053, 0x0a},
    {0x0205, 0x0c},
    {0x0a67, 0x80},
    {0x0a54, 0x0e},
    {0x0a65, 0x10},
    {0x0a98, 0x04},
    {0x05be, 0x00},
    {0x05a9, 0x01},
    {0x0023, 0x00},
    {0x0022, 0x00},
    {0x0025, 0x00},
    {0x0024, 0x00},
    {0x0028, 0x0b},
    {0x0029, 0x98},
    {0x002a, 0x06},
    {0x002b, 0x86},
    {0x0a83, 0xe0},
    {0x0a72, 0x02},
    {0x0a73, 0x60},
    {0x0a75, 0x41},
    {0x0a70, 0x03},
    {0x0a5a, 0x80},
    {0x0181, 0xf0},
    {0x0182, 0x05},
    {0x0185, 0x01},
    {0x0180, 0x46},
    {0x0100, 0x08},
    {0x010d, 0x74},
    {0x010e, 0x0e},
    {0x0113, 0x02},
    {0x0114, 0x03},
    {0x0115, 0x10},
    {0x0100, 0x09},
    {0x0a70, 0x00},
    {0x0080, 0x02},
    {0x0a67, 0x00},
    {0x0052, 0x02},
    {0x0076, 0x01},
    {0x021a, 0x10},
    {0x0049, 0x0f},
    {0x004a, 0x3c},
    {0x004b, 0x00},
    {0x0430, 0x25},
    {0x0431, 0x25},
    {0x0432, 0x25},
    {0x0433, 0x25},
    {0x0434, 0x59},
    {0x0435, 0x59},
    {0x0436, 0x59},
    {0x0437, 0x59},

    {0x0122, 0x08},//mipi configuration
    {0x0123, 0x30},
    {0x0124, 0x04},
    {0x0125, 0x30},
    {0x0126, 0x0c},
    {0x0129, 0x09},
    {0x012a, 0x0f},
    {0x012b, 0x0c},

    {0x0063, 0x03},//mirror and flip
    {0x022c, 0x03},

    {0x0202, 0x01},//exp
    {0x0203, 0x00},

    {0x0614, 0x00},//default again 1x
    {0x0615, 0x00},
    {0x0225, 0x04},
    {0x1467, 0x15},
    {0x1468, 0x15},
    {0x00b8, 0x01},
    {0x00b9, 0x00},
    {0x0064, 0x01},
    {0x0065, 0x00},
};


#ifdef __cplusplus
}
#endif

/* @} gc5603priv */

#endif    /* __GC5603PRIV_H__ */

