/******************************************************************************\
|* Copyright (c) 2020 by VeriSilicon Holdings Co., Ltd. ("VeriSilicon")       *|
|* All Rights Reserved.                                                       *|
|*                                                                            *|
|* The material in this file is confidential and contains trade secrets of    *|
|* of VeriSilicon.  This is proprietary information owned or licensed by      *|
|* VeriSilicon.  No part of this work may be disclosed, reproduced, copied,   *|
|* transmitted, or used in any way for any purpose, without the express       *|
|* written permission of VeriSilicon.                                         *|
|*                                                                            *|
\******************************************************************************/
/**
 * @file OS04a10_priv.h
 *
 * @brief Interface description for image sensor specific implementation (iss).
 *
 *****************************************************************************/
/**
 * @page module_name_page Module Name
 * Describe here what this module does.
 *
 * For a detailed list of functions and implementation detail refer to:
 * - @ref module_name
 *
 * @defgroup os04a10_priv
 * @{
 *
 */
#ifndef __OS04a10_PRIV_H__
#define __OS04a10_PRIV_H__

#include <ebase/types.h>
#include <common/return_codes.h>
#include <hal/hal_api.h>
#include <isi/isi_common.h>
#include <isi/isi_vvsensor.h>



#ifdef __cplusplus
extern "C"
{
#endif

typedef struct OS04a10_Context_s
{
    IsiSensorContext_t     isiCtx;                 /**< common context of ISI and ISI driver layer; @note: MUST BE FIRST IN DRIVER CONTEXT */
    IsiSensorMode_t        sensorMode;

    uint32_t               maxFps;
    uint32_t               minFps;
    uint32_t               currFps;

    bool_t                 configured;             /**< flags that config was applied to sensor */
    bool_t                 streaming;              /**< flags that csensor is streaming data */
    bool_t                 testPattern;            /**< flags that sensor is streaming test-pattern */
    bool_t                 isAfpsRun;              /**< if true, just do anything required for Afps parameter calculation, but DON'T access SensorHW! */

    float                  oneLineExpTime;
    uint16_t               maxIntegrationLine;
    uint16_t               minIntegrationLine;

    uint16_t               frameLengthLines;       /**< frame line length */
    uint16_t               curFrameLengthLines;

    float                  aecMinGain;
    float                  aecMaxGain;
    float                  aecMinIntegrationTime;
    float                  aecMaxIntegrationTime;

    float                  aecIntegrationTimeIncrement; /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */
    float                  aecGainIncrement;            /**< _smallest_ increment the sensor/driver can handle (e.g. used for sliders in the application) */

    float                  aecCurGain;
    float                  aecCurIntegrationTime;
    float                  curAgain;
    float                  curDgain;

    bool                   groupHold;
    uint32_t               oldGain;
    uint32_t               oldIntegrationTime;

    IsiGainInfo_t          aGain;
    IsiGainInfo_t          dGain;

} OS04a10_Context_t;

static RESULT OS04a10_IsiCreateIss(IsiSensorInstanceConfig_t *pConfig, IsiSensorHandle_t *pHandle);
static RESULT OS04a10_IsiOpenIss(IsiSensorHandle_t handle, uint32_t mode);
static RESULT OS04a10_IsiCloseIss(IsiSensorHandle_t handle);
static RESULT OS04a10_IsiReleaseIss(IsiSensorHandle_t handle);
static RESULT OS04a10_IsiGetCapsIss(IsiSensorHandle_t handle, IsiCaps_t * pCaps);
static RESULT OS04a10_IsiSetStreamingIss(IsiSensorHandle_t handle, bool_t on);
static RESULT OS04a10_IsiGetRevisionIss(IsiSensorHandle_t handle, uint32_t *pValue);
static RESULT OS04a10_IsiGetAeBaseInfoIss(IsiSensorHandle_t handle, IsiAeBaseInfo_t *pAeBaseInfo);
static RESULT OS04a10_IsiGetAGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorAGain);
static RESULT OS04a10_IsiGetDGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorDGain);
static RESULT OS04a10_IsiSetAGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorAGain);
static RESULT OS04a10_IsiSetDGainIss(IsiSensorHandle_t handle, IsiSensorGain_t *pSensorDGain);
static RESULT OS04a10_IsiGetIntTimeIss(IsiSensorHandle_t handle, IsiSensorIntTime_t *pSensorIntTime);
static RESULT OS04a10_IsiSetIntTimeIss(IsiSensorHandle_t handle, const IsiSensorIntTime_t *pSensorIntTime);


static uint16_t OS04a10_mipi4lane_2688_1520_init[][2] =
{
    {0x0103, 0x01},
    {0x0109, 0x01},
    {0x0104, 0x02},
    {0x0102, 0x00},
    {0x0303, 0x04},
    {0x0305, 0x3f},
    {0x0306, 0x00},
    {0x0307, 0x00},
    {0x0308, 0x05},
    {0x030a, 0x01},
    {0x0317, 0x0a},
    {0x0322, 0x01},
    {0x0323, 0x02},
    {0x0324, 0x00},
    {0x0325, 0x74},//0x90
    {0x0327, 0x05},
    {0x0329, 0x02},
    {0x032c, 0x02},
    {0x032d, 0x02},
    {0x032e, 0x02},
    {0x300f, 0x11},
    {0x3012, 0x41},
    {0x3026, 0x10},
    {0x3027, 0x08},
    {0x302d, 0x24},
    {0x3104, 0x01},
    {0x3106, 0x11},
    {0x3400, 0x00},
    {0x3408, 0x05},
    {0x340c, 0x0c},
    {0x340d, 0xb0},
    {0x3425, 0x51},
    {0x3426, 0x10},
    {0x3427, 0x14},
    {0x3428, 0x10},
    {0x3429, 0x10},
    {0x342a, 0x10},
    {0x342b, 0x04},
    {0x3501, 0x02},//DCG ecp 0x02
    {0x3504, 0x08},
    {0x3508, 0x01},
    {0x3509, 0x00},
    {0x350a, 0x01},
    {0x3544, 0x08},
    {0x3548, 0x01},
    {0x3549, 0x00},
    {0x3584, 0x08},
    {0x3588, 0x01},
    {0x3589, 0x00},
    {0x3601, 0x70},
    {0x3604, 0xe3},
    {0x3605, 0xff},
    {0x3606, 0x01},
    {0x3608, 0xa8},
    {0x360a, 0xd0},
    {0x360b, 0x08},
    {0x360e, 0xc8},
    {0x360f, 0x66},
    {0x3610, 0x89},
    {0x3611, 0x8a},
    {0x3612, 0x4e},
    {0x3613, 0xbd},
    {0x3614, 0x9b},
    {0x362a, 0x0e},
    {0x362b, 0x0e},
    {0x362c, 0x0e},
    {0x362d, 0x09},
    {0x362e, 0x1a},
    {0x362f, 0x34},
    {0x3630, 0x67},
    {0x3631, 0x7f},
    {0x3638, 0x00},
    {0x3643, 0x00},
    {0x3644, 0x00},
    {0x3645, 0x00},
    {0x3646, 0x00},
    {0x3647, 0x00},
    {0x3648, 0x00},
    {0x3649, 0x00},
    {0x364a, 0x04},
    {0x364c, 0x0e},
    {0x364d, 0x0e},
    {0x364e, 0x0e},
    {0x364f, 0x0e},
    {0x3650, 0xff},
    {0x3651, 0xff},
    {0x365a, 0x00},
    {0x365b, 0x00},
    {0x365c, 0x00},
    {0x365d, 0x00},
    {0x3661, 0x07},
    {0x3662, 0x00},
    {0x3663, 0x20},
    {0x3665, 0x12},
    {0x3667, 0xd4},
    {0x3668, 0x80},
    {0x366c, 0x00},
    {0x366d, 0x00},
    {0x366e, 0x00},
    {0x366f, 0x00},
    {0x3671, 0x08},
    {0x3673, 0x2a},
    {0x3681, 0x80},
    {0x3700, 0x2d},
    {0x3701, 0x22},
    {0x3702, 0x25},
    {0x3703, 0x28},
    {0x3705, 0x00},
    {0x3706, 0xf0},
    {0x3707, 0x0a},
    {0x3708, 0x36},
    {0x3709, 0x57},
    {0x370a, 0x03},
    {0x370b, 0x15},
    {0x3714, 0x01},
    {0x3719, 0x24},
    {0x371b, 0x1f},
    {0x371c, 0x00},
    {0x371d, 0x08},
    {0x373f, 0x63},
    {0x3740, 0x63},
    {0x3741, 0x63},
    {0x3742, 0x63},
    {0x3743, 0x01},
    {0x3756, 0xe7},
    {0x3757, 0xe7},
    {0x3762, 0x1c},
    {0x376c, 0x00},
    {0x3776, 0x05},
    {0x3777, 0x22},
    {0x3779, 0x60},
    {0x377c, 0x48},
    {0x3784, 0x06},
    {0x3785, 0x0a},
    {0x3790, 0x10},
    {0x3793, 0x04},
    {0x3794, 0x07},
    {0x3796, 0x00},
    {0x3797, 0x02},
    {0x379c, 0x4d},
    {0x37a1, 0x80},
    {0x37bb, 0x88},
    {0x37be, 0x48},
    {0x37bf, 0x01},
    {0x37c0, 0x01},
    {0x37c4, 0x72},
    {0x37c5, 0x72},
    {0x37c6, 0x72},
    {0x37ca, 0x21},
    {0x37cc, 0x15},
    {0x37cd, 0x90},
    {0x37cf, 0x02},
    {0x37d0, 0x00},
    {0x37d1, 0xf0},
    {0x37d2, 0x03},
    {0x37d3, 0x15},
    {0x37d4, 0x01},
    {0x37d5, 0x00},
    {0x37d6, 0x03},
    {0x37d7, 0x15},
    {0x37d8, 0x01},
    {0x37dc, 0x00},
    {0x37dd, 0x00},
    {0x37da, 0x00},
    {0x37db, 0x00},
    {0x3800, 0x00},
    {0x3801, 0x00},
    {0x3802, 0x00},
    {0x3803, 0x00},
    {0x3804, 0x0a},
    {0x3805, 0x8f},
    {0x3806, 0x05},
    {0x3807, 0xff},
    {0x3808, 0x0a},
    {0x3809, 0x80},
    {0x380a, 0x05},
    {0x380b, 0xf0},
    {0x380c, 0x0b},
    {0x380d, 0x88},
    {0x380e, 0x06},
    {0x380f, 0x58},
    {0x3811, 0x08},
    {0x3813, 0x08},
    {0x3814, 0x01},
    {0x3815, 0x01},
    {0x3816, 0x01},
    {0x3817, 0x01},
    {0x381c, 0x00},
    {0x3820, 0x02},
    {0x3821, 0x00},
    {0x3822, 0x14},
    {0x3823, 0x18},
    {0x3826, 0x00},
    {0x3827, 0x00},
    {0x3833, 0x40},
    {0x384c, 0x05},
    {0x384d, 0xc4},
    {0x3858, 0x3c},
    {0x3865, 0x02},
    {0x3866, 0x00},
    {0x3867, 0x00},
    {0x3868, 0x02},
    {0x3900, 0x13},
    {0x3940, 0x13},
    {0x3980, 0x13},
    {0x3c01, 0x11},
    {0x3c05, 0x00},
    {0x3c0f, 0x1c},
    {0x3c12, 0x0d},
    {0x3c19, 0x00},
    {0x3c21, 0x00},
    {0x3c3a, 0x10},
    {0x3c3b, 0x18},
    {0x3c3d, 0xc6},
    {0x3c55, 0xcb},
    {0x3c5a, 0xe5},
    {0x3c5d, 0xcf},
    {0x3c5e, 0xcf},
    {0x3d8c, 0x70},
    {0x3d8d, 0x10},
    {0x4000, 0xf9},
    {0x4001, 0x2f},
    {0x4004, 0x00},
    {0x4005, 0x80},
    {0x4008, 0x02},
    {0x4009, 0x11},
    {0x400a, 0x03},
    {0x400b, 0x27},
    {0x400e, 0x40},
    {0x402e, 0x00},
    {0x402f, 0x80},
    {0x4030, 0x00},
    {0x4031, 0x80},
    {0x4032, 0x9f},
    {0x4033, 0x80},
    {0x4050, 0x00},
    {0x4051, 0x07},
    {0x4011, 0xbb},
    {0x410f, 0x01},
    {0x4288, 0xcf},
    {0x4289, 0x00},
    {0x428a, 0x46},
    {0x430b, 0xff},
    {0x430c, 0xff},
    {0x430d, 0x00},
    {0x430e, 0x00},
    {0x4314, 0x04},
    {0x4500, 0x18},
    {0x4501, 0x18},
    {0x4503, 0x10},
    {0x4504, 0x00},
    {0x4506, 0x32},
    {0x4507, 0x02},
    {0x4601, 0x30},
    {0x4603, 0x00},
    {0x460a, 0x50},
    {0x460c, 0x60},
    {0x4640, 0x62},
    {0x4646, 0xaa},
    {0x4647, 0x55},
    {0x4648, 0x99},
    {0x4649, 0x66},
    {0x464d, 0x00},
    {0x4654, 0x11},
    {0x4655, 0x22},
    {0x4800, 0x44},
    {0x480e, 0x00},
    {0x4810, 0xff},
    {0x4811, 0xff},
    {0x4813, 0x00},
    {0x481f, 0x30},
    {0x4837, 0x1f},
    {0x484b, 0x27},
    {0x4d00, 0x4d},
    {0x4d01, 0x9d},
    {0x4d02, 0xb9},
    {0x4d03, 0x2e},
    {0x4d04, 0x4a},
    {0x4d05, 0x3d},
    {0x4d09, 0x4f},
    {0x5000, 0x7f},
    {0x5001, 0x0d},
    {0x5080, 0x00},
    {0x50c0, 0x00},
    {0x5100, 0x00},
    {0x5200, 0x00},
    {0x5201, 0x00},
    {0x5202, 0x03},
    {0x5203, 0xff},
    {0x5780, 0x53},
    {0x5782, 0x60},
    {0x5783, 0xf0},
    {0x5786, 0x01},
    {0x5788, 0x60},
    {0x5789, 0xf0},
    {0x5792, 0x11},
    {0x5793, 0x33},
    {0x5857, 0xff},
    {0x5858, 0xff},
    {0x5859, 0xff},
    {0x58d7, 0xff},
    {0x58d8, 0xff},
    {0x58d9, 0xff},
};


#ifdef __cplusplus
}
#endif

/* @} os04a10priv */

#endif    /* __OS04a10PRIV_H__ */

